{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e1ctica 3-5. Despliegue de una aplicaci\u00f3n Flask Instalaci\u00f3n de prerrequisitos Para instalar los paquetes necesarios para esta pr\u00e1ctica hay que ejecutar: sudo apt install nginx sudo apt install python3-pip pipenv De esta manera, tendremos instalados: Servidor Nginx. El gestor para paquetes de Python, pip. El gestor de entornos virtuales de Python, pipenv. Podemos comprobar la correcta instalaci\u00f3n de estas herramientas ejecutando: sudo nginx -v pip -V pipenv --version pip list # Mostrar\u00e1 todos los paquetes de Python instalados. Despliegue de una aplicaci\u00f3n de prueba Creamos un directorio para almacenar el contenido de nuestro proyecto en /var/www, hacemos due\u00f1o a nuestro usuario y le damos los permisos necesarios para que pueda ser le\u00eddo por cualquier usuario: sudo mkdir /var/www/app sudo chown -R alberto:www-data /var/www/app sudo chmod -R 775 /var/www/app Creamos un archivo '.env' en el directorio del proyecto con el siguiente contenido: FLASK_APP=wsgi.py FLASK_ENV=production Iniciamos el entorno virtual e instalamos en \u00e9l las dependencias de Flask y Gunicorn: pipenv shell pipenv install flask gunicorn Creamos ahora una aplicaci\u00f3n de prueba 'app.py': from flask import Flask app = Flask(__name__) @app.route('/') def index(): return '<h1>Aplicaci\u00f3n desplegada</h1> Y tambi\u00e9n un archivo 'wsgi.py', que ser\u00e1 el encargado de ejecutar la aplicaci\u00f3n principal: from app import app if __name__ == '__main__': app.run(debug=False) Tenemos que habilitar el puerto 5000: sudo ufw allow 5000 Desplegamos la aplicaci\u00f3n ejecutando: flask run --host '0.0.0.0' Y comprobamos que est\u00e1 en funcionamiento: Para comprobar que Gunicorn funciona correctamente ejecutamos el comando: gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app Y en el navegador veremos que tambi\u00e9n se ha desplegado la aplicaci\u00f3n: A\u00fan dentro del enterno debemos comprobar la ruta desde la que se ejecuta gunicorn: which gunicorn # /home/alberto/.local/share/virtualenvs/app-1lvW3LzD/bin/gunicorn Ahora podemos salir del entorno virtual: deactivate Creamos un archivo 'flask_app.service' en el directorio /etc/systemd/system/ para que se ejecute Gunicorn como si fuera un servicio del sistema. En mi caso, el contenido del archivo es: E iniciamos el servicio y comprobamos que funciona correctamente como si fuera cualquier otro servicio del sistema: sudo systemctl enable flask_app sudo systemctl start flask_app sudo systemctl status flask_app Ahora s\u00f3lo queda configurar Nginx y a\u00f1adir el nombre de la p\u00e1gina al archivo 'hosts'. En primer lugar, creamos un archivo de configuraci\u00f3n en /etc/nginx/sites-available y creamos un enlace simb\u00f3lico a este archivo en /etc/nginx/sites-enabled. El archivo tendr\u00e1 este contenido: server { listen 80; server_name app www.app; access_log /var/log/nginx/app.access.log; error_log /var/log/nginx/app.error.log; location / { include proxy_params; proxy_pass http://unix:/var/www/app/flask_app.sock; } } Creamos el enlace simb\u00f3lico: sudo ln -s /etc/nginx/sites-available/app ../sites-enabled Reiniciamos Nginx y comprobamos que no hay errores: sudo systemctl restart nginx sudo nginx -t sudo nginx status nginx Ahora modificaremos en nuestra m\u00e1quina anfitriona el archivo /etc/hosts para incluir el nombre de nuestra p\u00e1gina y poder acceder con este nombre a trav\u00e9s del navegador: Y desde el navegador comprobamos que la aplicaci\u00f3n funciona correctamente: Cuestiones finales \u00bfQu\u00e9 es un servidor WSGI? Un servidor WSGI es un intermediario entre un servidor web (como Nginx) y una aplicaci\u00f3n web escrita en Python (como una aplicaci\u00f3n de Flask). Su funci\u00f3n es dirigir las peticiones del navegador hechas por un cliente a la aplicaci\u00f3n Python y devolver la respuesta generada por dicha aplicaci\u00f3n.","title":"Pr\u00e1ctica 3-5. Despliegue de una aplicaci\u00f3n Flask"},{"location":"#practica-3-5-despliegue-de-una-aplicacion-flask","text":"","title":"Pr\u00e1ctica 3-5. Despliegue de una aplicaci\u00f3n Flask"},{"location":"#instalacion-de-prerrequisitos","text":"Para instalar los paquetes necesarios para esta pr\u00e1ctica hay que ejecutar: sudo apt install nginx sudo apt install python3-pip pipenv De esta manera, tendremos instalados: Servidor Nginx. El gestor para paquetes de Python, pip. El gestor de entornos virtuales de Python, pipenv. Podemos comprobar la correcta instalaci\u00f3n de estas herramientas ejecutando: sudo nginx -v pip -V pipenv --version pip list # Mostrar\u00e1 todos los paquetes de Python instalados.","title":"Instalaci\u00f3n de prerrequisitos"},{"location":"#despliegue-de-una-aplicacion-de-prueba","text":"Creamos un directorio para almacenar el contenido de nuestro proyecto en /var/www, hacemos due\u00f1o a nuestro usuario y le damos los permisos necesarios para que pueda ser le\u00eddo por cualquier usuario: sudo mkdir /var/www/app sudo chown -R alberto:www-data /var/www/app sudo chmod -R 775 /var/www/app Creamos un archivo '.env' en el directorio del proyecto con el siguiente contenido: FLASK_APP=wsgi.py FLASK_ENV=production Iniciamos el entorno virtual e instalamos en \u00e9l las dependencias de Flask y Gunicorn: pipenv shell pipenv install flask gunicorn Creamos ahora una aplicaci\u00f3n de prueba 'app.py': from flask import Flask app = Flask(__name__) @app.route('/') def index(): return '<h1>Aplicaci\u00f3n desplegada</h1> Y tambi\u00e9n un archivo 'wsgi.py', que ser\u00e1 el encargado de ejecutar la aplicaci\u00f3n principal: from app import app if __name__ == '__main__': app.run(debug=False) Tenemos que habilitar el puerto 5000: sudo ufw allow 5000 Desplegamos la aplicaci\u00f3n ejecutando: flask run --host '0.0.0.0' Y comprobamos que est\u00e1 en funcionamiento: Para comprobar que Gunicorn funciona correctamente ejecutamos el comando: gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app Y en el navegador veremos que tambi\u00e9n se ha desplegado la aplicaci\u00f3n: A\u00fan dentro del enterno debemos comprobar la ruta desde la que se ejecuta gunicorn: which gunicorn # /home/alberto/.local/share/virtualenvs/app-1lvW3LzD/bin/gunicorn Ahora podemos salir del entorno virtual: deactivate Creamos un archivo 'flask_app.service' en el directorio /etc/systemd/system/ para que se ejecute Gunicorn como si fuera un servicio del sistema. En mi caso, el contenido del archivo es: E iniciamos el servicio y comprobamos que funciona correctamente como si fuera cualquier otro servicio del sistema: sudo systemctl enable flask_app sudo systemctl start flask_app sudo systemctl status flask_app Ahora s\u00f3lo queda configurar Nginx y a\u00f1adir el nombre de la p\u00e1gina al archivo 'hosts'. En primer lugar, creamos un archivo de configuraci\u00f3n en /etc/nginx/sites-available y creamos un enlace simb\u00f3lico a este archivo en /etc/nginx/sites-enabled. El archivo tendr\u00e1 este contenido: server { listen 80; server_name app www.app; access_log /var/log/nginx/app.access.log; error_log /var/log/nginx/app.error.log; location / { include proxy_params; proxy_pass http://unix:/var/www/app/flask_app.sock; } } Creamos el enlace simb\u00f3lico: sudo ln -s /etc/nginx/sites-available/app ../sites-enabled Reiniciamos Nginx y comprobamos que no hay errores: sudo systemctl restart nginx sudo nginx -t sudo nginx status nginx Ahora modificaremos en nuestra m\u00e1quina anfitriona el archivo /etc/hosts para incluir el nombre de nuestra p\u00e1gina y poder acceder con este nombre a trav\u00e9s del navegador: Y desde el navegador comprobamos que la aplicaci\u00f3n funciona correctamente:","title":"Despliegue de una aplicaci\u00f3n de prueba"},{"location":"#cuestiones-finales","text":"\u00bfQu\u00e9 es un servidor WSGI? Un servidor WSGI es un intermediario entre un servidor web (como Nginx) y una aplicaci\u00f3n web escrita en Python (como una aplicaci\u00f3n de Flask). Su funci\u00f3n es dirigir las peticiones del navegador hechas por un cliente a la aplicaci\u00f3n Python y devolver la respuesta generada por dicha aplicaci\u00f3n.","title":"Cuestiones finales"}]}